[{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Nowcasting with 'JDemetra+ v3.x'","text":"package can use specify estimate Dynamic Factor Models efficient way provide consistent forecasts. Recent version package also includes news analysis. Analyzing news, defined discrepancy newly released figures forecasts, helps interpret forecast revisions. mentioned Banbura Modugno (2010), enables us produce statements like “forecast revised … higher expected release …”. R package uses efficient libraries JDemetra+ v3. way package conceived inspired GUI add-developed JDemetra+ V2 provides functionality (except real-time simulation), flexible R environment.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"installation-settings","dir":"Articles","previous_headings":"","what":"Installation settings","title":"Nowcasting with 'JDemetra+ v3.x'","text":"package relies specific Java libraries JDemetra+ v3 package rjd3toolkit rjdverse. Prior installation, must ensure Java version >= 17.0 computer. need use portable version Java fill request, can follow instructions installation manual. addition Java version >= 17.0, must recent version R packages rJava (>= 1.0.6) RProtobuf (>=0.4.17) can download CRAN. package rjd3nowcasting depends package rjd3toolkit must install GitHub beforehand. Note depending R packages already installed computer, might also asked install re-install packages CRAN.","code":"# To get the current stable version (from the latest release): ### install.packages(\"remotes\") remotes::install_github(\"rjdverse/rjd3toolkit@*release\") remotes::install_github(\"rjdverse/rjd3nowcasting@*release\", build_vignettes = TRUE)  # or to get the current development version from GitHub: remotes::install_github(\"rjdverse/rjd3nowcasting\")"},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Nowcasting with 'JDemetra+ v3.x'","text":"package loaded, four steps follow: Import data Create update model Estimate model Get results Detailed information concerning step follows example.","code":"library(rjd3nowcasting) # Quick start example  ## 1. Data  set.seed(100) data0 <- stats::ts(     data = matrix(rnorm(500), 100, 5),      frequency = 12,      start = c(2010, 1) ) data0[100, 1] <- data0[99:100, 2] <- data0[(1:100)[-seq(3, 100, 3)], 5] <- NA  data1 <- stats::ts(     data = rbind(data0, c(NA, NA, 1, 1, NA)),      frequency = 12,      start = c(2010, 1) ) data1[100,1] <- data1[99,2] <- 1   ## 2. Create or update the model  ### Create model from scratch dfm0 <- create_model(nfactors=2,                      nlags=2,                      factors_type = c(\"M\", \"M\", \"YoY\", \"M\", \"Q\"),                      factors_loading = matrix(data = TRUE, 5, 2),                      var_init = \"Unconditional\")  ### Update model # ! Recall: due to potential presence of local minimum  and lack of   # identification issue, it is always better to start from a previously  # estimated model when available.   est0 <- estimate_em(dfm0, data0) # cfr. next step  dfm1 <- est0$dfm # R object (list) to potentially save from one time to another   # or, equivalently, dfm1 <- create_model(nfactors=2,                      nlags=2,                      factors_type = c(\"M\", \"M\", \"YoY\", \"M\", \"Q\"),                      factors_loading = matrix(data = TRUE, 5, 2),                      var_init = \"Unconditional\",                      var_coefficients = est0$dfm$var_coefficients,                      var_errors_variance = est0$dfm$var_errors_variance,                      measurement_coefficients = est0$dfm$measurement_coefficients,                      measurement_errors_variance = est0$dfm$measurement_errors_variance)   ## 3. Estimate the model  est1 <- estimate_ml(dfm1, data1) # or est1<-estimate_em(dfm1, data1) # or est1<-estimate_pca(dfm1, data1)   ## 4. Get results  rslt1 <- get_results(est1) print(rslt1) fcst1 <- get_forecasts(est1, n_fcst = 2) print(fcst1) plot(fcst1)  news1 <- get_news(est0, data1, target_series = \"Series 1\", n_fcst = 2) print(news1) plot(news1)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"import-data","dir":"Articles","previous_headings":"Usage","what":"1. Import data","title":"Nowcasting with 'JDemetra+ v3.x'","text":"data can imported anywhere. , required create time-series object using well-known stats::ts() function like example. case dynamic work, columns dataset remain one time another order. additional rows can added reflecting new data coming .","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"create-a-new-model","dir":"Articles","previous_headings":"Usage > 2. Create/Update model","what":"2.1. Create a new model","title":"Nowcasting with 'JDemetra+ v3.x'","text":"function create_model() enables build new model. state-space representation Dynamic Factor Model can written follows yt=Zft+ϵt,ϵt∼N(0,Rt)ft=A1ft−1+...+Apft−p+ηt,ηt∼N(0,Qt) \\begin{aligned}   y_t &= Z f_t + \\epsilon_t, \\quad \\epsilon_t \\sim N(0, R_t) \\\\   f_t &= A_1 f_{t-1} + ... + A_p f_{t-p} + \\eta_t, \\quad \\eta_t \\sim N(0, Q_t)  \\end{aligned}  measurement equation links observations underlying factors. factors, shown second equation, follow VAR process order p. number factors consider order p VAR process defined first two arguments function create_model(). third argument factors_type defines link series factors (Z matrix). link can less sophisticated depending variables. Three options possible moment: variable expressed terms monthly growth rates can linked factor representing underlying monthly growth rate economy defining factor type “M” variable (default). monthly quarterly variable correlated underlying quarterly growth rate economy can linked weighted average factors representing underlying monthly growth rate economy. weighted average meant represent quarterly growth rates, can implemented defining factor type “Q” variable. variable can also linked cumulative sum last 12 monthly factors. model designed way monthly factors represent monthly growth rates, resulting cumulative sum boils year--year growth rate. Thus, variables expressed terms year--year growth rates surveys correlated year--year growth rates reference series linked factors way. factor type defined “YoY” case. fourth last compulsory argument refers factors loading can incorporate zero restrictions. Users must mention factors load variables. argument var_init tells whether first unobserved factors values defined considering unconditional distribution (recommended) set equal zero. last four arguments var_coefficients, var_errors_variance, measurement_coefficients measurement_errors_variance can used create model based previous estimate model (see section Update existing model). default value four arguments NULL meaning model created scratch.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"update-an-existing-model","dir":"Articles","previous_headings":"Usage > 2. Create/Update model","what":"2.2. Update an existing model","title":"Nowcasting with 'JDemetra+ v3.x'","text":"case dynamic work, similar model previously estimated based older version data. case, recommended create new model scratch start previously estimated model. , must made recoverable previous time. One option save required information one time another using base function saveRDS() (see section 3 know exactly saved). Reasons starting previously estimated model available faster convergence estimation step possibility avoid running another local minimum, resulting parameters estimates potentially different previous time (especially since model fully identifiable). generate new model previously estimated one, two possibilities: Set new R object directly previous one, Use function create_model() filling arguments var_coefficients, var_errors_variance, measurement_coefficients measurement_errors_variance previously estimated values.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"composition-of-the-created-object","dir":"Articles","previous_headings":"Usage > 2. Create/Update model","what":"2.3. Composition of the created object","title":"Nowcasting with 'JDemetra+ v3.x'","text":"function create_model() returns R object called ‘JD3_DfmModel’. just list six elements fully characterize model. list includes estimated coefficient VAR equation variance-covariance matrix error terms, estimated coefficient measurement equation idiosyncratic variance error terms, type initialisation link consider series factor (.e. argument factors_type). R list matrices vectors can easily saved one time another using example function saveRDS().","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"different-algorithmsfunctions","dir":"Articles","previous_headings":"Usage > 3. Estimation","what":"3.1. Different algorithms/functions","title":"Nowcasting with 'JDemetra+ v3.x'","text":"Parameters can estimated using different algorithms. One three available functions picked purpose estimation: function estimate_pca() estimates model parameters using Principal Component Analysis (PCA). Although fast, approach recommended, especially series quarterly series series associated year--year growth rates (see section 2.1). function estimate_em() estimates model parameters using EM algorithm (initial values given PCA default). function includes optional arguments can used tune estimation process. function estimate_ml() estimates model parameters Maximum Likelihood (default, initial values given EM algorithm whose initial values given PCA). function includes several optional arguments can used tune estimation process. function estimate_ml() recommended, although can argued function estimate_em(), somewhat faster, also constitutes good solution. three functions two compulsory arguments necessary estimate parameters: model, .e. object class ‘JD3_DfmModel’ typically generated create_model() function, dataset must mts object. three functions return R object, object class ‘JD3_DfmEstimates’ can used input results functions (see section 4). Note returned object just R list containing various elements. addition selected algorithm, estimation speed depends size model. Models one two factors fastly estimated (seconds), also number variables large. However, estimation complex models may take minutes converge.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"prior-standardization-of-the-data","dir":"Articles","previous_headings":"Usage > 3. Estimation","what":"3.2. Prior standardization of the data","title":"Nowcasting with 'JDemetra+ v3.x'","text":"Dynamic factor models require prior standardization data. essential step can lead confusion certain situations. usual mechanism quite simple divided three stages: Standardization variables (.e., subtract mean divide standard deviation) Model estimation based standardized data Convert results (including forecasts) raw data means likelihood model estimates parameters, given transformed data. However, final results like forecasts forecasts errors variance transformed series converted raw data. default, data standardized. , reasons, dataset already contains standardized data, standardization step can skipped defining standardized = TRUE estimation function. need pay particular attention standardization step working dynamically. instance, wish re-estimate model (see section 3.3), must also provide initial mean standard deviation variables calculated time last estimation model. argument input_standardization estimation function purpose. Note news analysis (see section 4.3), mean standard deviation considered standardization step must old new datasets. practice, calculated based old dataset.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"fixed-parameters","dir":"Articles","previous_headings":"Usage > 3. Estimation","what":"3.3. Fixed parameters","title":"Nowcasting with 'JDemetra+ v3.x'","text":"three estimation functions include boolean argument re_estimate indicate whether model re-estimated (default) . Note news analysis (see section 4.3), model kept unchanged previous current period track impact news. Hence, retrieve forecasts return get_news() function, consider re_estimate = FALSE previous standardization input added argument input_standardization (see section 3.2).","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"save-r-object-from-one-time-to-another","dir":"Articles","previous_headings":"Usage > 3. Estimation","what":"3.4. Save R object from one time to another","title":"Nowcasting with 'JDemetra+ v3.x'","text":"case dynamic work, R object passed one time another (see section 2.2). , user invited use functions saveRDS() readRDS() base R. save depends whether intention user perform news analysis. intention perform news analysis just re-estimate model time update forecasts, estimated model saved one time another. object class ‘JD3_DfmModel’, generated part output function estimate_pca(), estimate_em() estimate_ml(), default/previous estimates parameters replaced new ones. updated model element referred ‘dfm’ list returned estimation functions. intention perform news analysis, entire object/list returned function estimate_pca(), estimate_em() estimate_ml(), .e. R object class ‘JD3_DfmEstimates’, saved. Optionally, matrix standardization input used time initial estimate (.e. mean standard deviation used standardize data) can saved well. time initial estimate, formatted matrix containing information can found preprocessing section output function get_results() (see section 4.1). used instance retrieve concordance forecasts functions get_forecasts() get_news().","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"results","dir":"Articles","previous_headings":"Usage","what":"4. Results","title":"Nowcasting with 'JDemetra+ v3.x'","text":"Results split three parts.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"estimates","dir":"Articles","previous_headings":"Usage > 4. Results","what":"4.1. Estimates","title":"Nowcasting with 'JDemetra+ v3.x'","text":"function get_results() can used obtain results related pre-processing: including standardization input (see section 3.2, 3.3 3.4) parameters estimates factors residuals likelihood function get_results() single argument object class ‘JD3_DfmEstimates’ typically generated function estimate_pca(), estimate_em() estimate_ml(). returns object class ‘JD3_DfmResults’ list aforementioned output. generic print() function can applied output returns (default) nicely formatted results related parameters estimates.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"forecasts","dir":"Articles","previous_headings":"Usage > 4. Results","what":"4.2. Forecasts","title":"Nowcasting with 'JDemetra+ v3.x'","text":"function get_forecasts() can used obtain forecasts variables, well forecast errors standard deviation. access forecasts transformed series (see section 3.2) raw series. part output list, also extra output referred ‘forecasts_only’. just extract forecasts raw series contains forecasts, .e. rest series appear together forecasts. function get_forecasts() two arguments. One object class ‘JD3_DfmEstimates’ typically generated function estimate_pca(), estimate_em() estimate_ml(). number forecasting periods consider, starting --date variable. Two generic functions can applied object returned function get_forecasts(). print() function return (default) forecasts . plot function can used visualize series forecasts well 80% prediction interval around forecasts.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"news-analysis","dir":"Articles","previous_headings":"Usage > 4. Results","what":"4.3. News analysis","title":"Nowcasting with 'JDemetra+ v3.x'","text":"two kind differences two consecutive updates dataset: Newly released figures Revision past data purpose news analysis monitor impact (1) forecasts. impacts can scrutinized details using get_news() function. function displays impact difference newly released figures forecast based revised figures (.e. old data + (2)). function get_news() four arguments: estimated model object class ‘JD3_DfmEstimates’ generated function estimate_pca(), estimate_em() estimate_ml(). purpose news analysis monitor impact newly released figures forecasts, model kept unchanged previous new release. Hence, previously estimated model one specified . Note pre-standardization data (see section 3.2) also calculated based previous release. newly released data mts object variable interest number forecasts consider list output returned function get_news() contains weights news, impact forecasts transformed (see section 3.2) raw series. weights given news represent relevance variable interest. impacts weights news times size. give impact piece news forecast revisions variable interest. Therefore allow users understand revisions can decomposed terms news components various series. generic plot() function can used directly object class ‘JD3_DfmNews’ (.e. object generated function get_news()) quickly visualize impacts nicely formatted barchart. similar included GUI add-JDemetra+ V2.x. Finally, forecasts returned function get_news() include: old forecasts forecasts based previous data revised forecasts forecasts based previous data past data revised based new data. Hence, global impact revisions past data also provided considering difference revised forecasts old forecasts. new forecasts forecasts based new data. difference new revised forecasts corresponds sum impacts news. addition plot() function, two generic functions can applied object class ‘JD3_DfmNews’. function summary() give summary weights impacts news variable interest forecasting period. print() function returns table summary() function together information related forecasts.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/articles/rjd3nowcasting.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Nowcasting with 'JDemetra+ v3.x'","text":"Banbura, Marta Modugno, Michele (2010) “Maximum Likelihood Estimation Factors Models Data Sets Arbitrary Pattern Missing Data” Working Paper Series 1189 ECB. De Antonio Liedo, David (2014) “Nowcasting Belgium” Working paper Research 256.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Corentin Lemasson. Author, maintainer. Tanguy Barthelemy. Contributor, artist.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lemasson C (2024). rjd3nowcasting: Nowcasting 'JDemetra+ 3.0'. R package version 3.0.3.9000, https://rjdverse.github.io/rjd3nowcasting/, https://github.com/rjdverse/rjd3nowcasting.","code":"@Manual{,   title = {rjd3nowcasting: Nowcasting with 'JDemetra+ 3.0'},   author = {Corentin Lemasson},   year = {2024},   note = {R package version 3.0.3.9000,     https://rjdverse.github.io/rjd3nowcasting/},   url = {https://github.com/rjdverse/rjd3nowcasting}, }"},{"path":[]},{"path":"https://rjdverse.github.io/rjd3nowcasting/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Nowcasting with JDemetra+ 3.0","text":"Nowcasting often defined prediction present, near future recent past. rjd3nowcasting provides helps operationalize process nowcasting. can used specify estimate Dynamic Factor Models. Recent version package also includes news analysis. way package conceived inspired GUI add-developed JDemetra+ V2.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Nowcasting with JDemetra+ 3.0","text":"Running rjd3 packages requires Java 17 higher. set configuration R explained ","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/index.html","id":"latest-release","dir":"","previous_headings":"Installation","what":"Latest release","title":"Nowcasting with JDemetra+ 3.0","text":"get current stable version (latest release): GitHub: r-universe:","code":"# install.packages(\"remotes\") remotes::install_github(\"rjdverse/rjd3toolkit@*release\") remotes::install_github(\"rjdverse/rjd3nowcasting@*release\", build_vignettes = TRUE) install.packages(\"rjd3nowcasting\", repos = c(\"https://rjdverse.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://rjdverse.github.io/rjd3nowcasting/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Nowcasting with JDemetra+ 3.0","text":"can install development version rjd3nowcasting GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"rjdverse/rjd3nowcasting\")"},{"path":"https://rjdverse.github.io/rjd3nowcasting/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Nowcasting with JDemetra+ 3.0","text":"package loaded, four steps follow: Import data Create update model Estimate model Get results Detailed information concerning step can found vignette.","code":"library(\"rjd3nowcasting\")"},{"path":"https://rjdverse.github.io/rjd3nowcasting/index.html","id":"id_1-input","dir":"","previous_headings":"Usage","what":"1. Input","title":"Nowcasting with JDemetra+ 3.0","text":"","code":"set.seed(100) data0 <- stats::ts(     data = matrix(rnorm(500), 100, 5),      frequency = 12,      start = c(2010, 1) ) data0[100, 1] <- data0[99:100, 2] <- data0[(1:100)[-seq(3, 100, 3)], 5] <- NA  data1 <- stats::ts(     data = rbind(data0, c(NA, NA, 1, 1, NA)),      frequency = 12,      start = c(2010, 1) ) data1[100,1] <- data1[99,2] <- 1"},{"path":"https://rjdverse.github.io/rjd3nowcasting/index.html","id":"id_2-create-or-update-the-model","dir":"","previous_headings":"Usage","what":"2. Create or update the model","title":"Nowcasting with JDemetra+ 3.0","text":"","code":"### Create model from scratch dfm0 <- create_model(nfactors=2,                      nlags=2,                      factors_type = c(\"M\", \"M\", \"YoY\", \"M\", \"Q\"),                      factors_loading = matrix(data = TRUE, 5, 2),                      var_init = \"Unconditional\")  ### Update model est0 <- estimate_em(dfm0, data0) # cfr. next step  dfm1 <- est0$dfm # R object (list) to potentially save from one time to another   # or, equivalently, dfm1 <- create_model(nfactors=2,                      nlags=2,                      factors_type = c(\"M\", \"M\", \"YoY\", \"M\", \"Q\"),                      factors_loading = matrix(data = TRUE, 5, 2),                      var_init = \"Unconditional\",                      var_coefficients = est0$dfm$var_coefficients,                      var_errors_variance = est0$dfm$var_errors_variance,                      measurement_coefficients = est0$dfm$measurement_coefficients,                      measurement_errors_variance = est0$dfm$measurement_errors_variance)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/index.html","id":"id_3-estimate-the-model","dir":"","previous_headings":"Usage","what":"3. Estimate the model","title":"Nowcasting with JDemetra+ 3.0","text":"","code":"est1 <- estimate_ml(dfm1, data1) # or est1<-estimate_em(dfm1, data1) # or est1<-estimate_pca(dfm1, data1)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/index.html","id":"id_4-get-results","dir":"","previous_headings":"Usage","what":"4. Get results","title":"Nowcasting with JDemetra+ 3.0","text":"","code":"rslt1 <- get_results(est1) print(rslt1) fcst1 <- get_forecasts(est1, n_fcst = 2) print(fcst1) plot(fcst1)  news1 <- get_news(est0, data1, target_series = \"Series 1\", n_fcst = 2) print(news1) plot(news1) # ..."},{"path":"https://rjdverse.github.io/rjd3nowcasting/index.html","id":"package-maintenance-and-contributing","dir":"","previous_headings":"","what":"Package Maintenance and contributing","title":"Nowcasting with JDemetra+ 3.0","text":"contribution welcome done pull requests /issues. pull requests include updated tests updated documentation. functionality changed, docstrings added updated.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/index.html","id":"licensing","dir":"","previous_headings":"","what":"Licensing","title":"Nowcasting with JDemetra+ 3.0","text":"code project licensed European Union Public Licence (EUPL).","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/create_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Dynamic Factor Model — create_model","title":"Create Dynamic Factor Model — create_model","text":"Create Dynamic Factor Model","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/create_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Dynamic Factor Model — create_model","text":"","code":"create_model(   nfactors,   nlags,   factors_type,   factors_loading,   var_init = c(\"Unconditional\", \"Zero\"),   var_coefficients = NULL,   var_errors_variance = NULL,   measurement_coefficients = NULL,   measurement_errors_variance = NULL )"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/create_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Dynamic Factor Model — create_model","text":"nfactors Integer. Number factors. nlags Integer. Number lags VAR equations. factors_type Character vector. Respecting order series  input data, must refer link (transformed)  series factors. Three options possible: \"M\": Variables expressed terms monthly growth rates can   linked factor representing underlying monthly growth rate   economy \"M\" selected \"Q\": Monthly quarterly variables correlated   underlying quarterly growth rate economy can linked   weighted average factors representing underlying monthly   growth rate economy. weighted average meant represent   quarterly growth rates, implemented selecting \"Q\" \"YoY\": variables can also linked cumulative sum   last 12 monthly factors. model designed way   monthly factors represent monthly growth rates, resulting cumulative   sum boils year--year growth rate. Thus, variables expressed   terms year--year growth rates surveys correlated   year--year growth rates reference series linked   factors using \"YoY\". factors_loading Boolean matrix. represents factor loading structure. dimension matrix 'number series' x 'number factors'. row representing series, user must mention whether corresponding factor loads series. var_init Character. first unobserved factors values sample assumed either equal zero consistent normal distribution mean zero variance corresponding unconditional variance VAR. latter default. var_coefficients Matrix. default NULL meaning VAR   coefficients estimated scratch. Alternatively, matrix   pre-defined values can passed . come typically   previous model estimate serve starting point   estimation step. format matrix one   produced default create_model() function keeping `var_coefficients` argument default value NULL. var_errors_variance Matrix. default NULL meaning VAR   errors variance estimated scratch. Alternatively, matrix   pre-defined values can passed . come typically   previous model estimate serve starting point   estimation step. format matrix one   produced default create_model() function keeping `var_errors_variance` argument default value NULL. measurement_coefficients Matrix. default NULL meaning   measurement coefficients estimated scratch. Alternatively,   matrix pre-defined values can passed . come typically   previous model estimate serve starting point   estimation step. format matrix one   produced default create_model() function keeping `measurement_coefficients` argument default value NULL. measurement_errors_variance Numeric vector. default NULL   meaning measurement errors variance estimated   scratch. Alternatively, vector pre-defined values can passed .   come typically previous model estimate serve   starting point estimation step. format vector   one produced default create_model() function   keeping `measurement_errors_variance` argument default value NULL.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/create_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Dynamic Factor Model — create_model","text":"object class 'JD3_DfmModel'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/create_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Dynamic Factor Model — create_model","text":"","code":"# From scratch dfm1 <- create_model(nfactors=2,                      nlags=2,                      factors_type = c(\"M\", \"M\", \"YoY\", \"M\", \"Q\"),                      factors_loading = matrix(data=TRUE, 5, 2),                      var_init = \"Unconditional\")  # From a previous estimate set.seed(100) data<-ts(matrix(rnorm(500), 100, 5), frequency = 12, start = c(2010,1)) data[100,1]<-data[99:100,2]<-data[(1:100)[-seq(3,100,3)],5]<-NA est1<-estimate_em(dfm1, data)  dfm2 <- create_model(nfactors=2,                      nlags=2,                      factors_type = c(\"M\", \"M\", \"YoY\", \"M\", \"Q\"),                      factors_loading = matrix(data=TRUE, 5, 2),                      var_init = \"Unconditional\",                      var_coefficients = est1$dfm$var_coefficients,                      var_errors_variance = est1$dfm$var_errors_variance,                      measurement_coefficients = est1$dfm$measurement_coefficients,                      measurement_errors_variance = est1$dfm$measurement_errors_variance) #est2<-estimate_em(dfm2, data)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_em.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate DFM with Expectations-Maximization algorithm — estimate_em","title":"Estimate DFM with Expectations-Maximization algorithm — estimate_em","text":"Estimate DFM Expectations-Maximization algorithm","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_em.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate DFM with Expectations-Maximization algorithm — estimate_em","text":"","code":"estimate_em(   dfm,   data,   standardized = FALSE,   input_standardization = NULL,   pca_init = TRUE,   max_iter = 100,   eps = 1e-09,   re_estimate = TRUE )"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_em.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate DFM with Expectations-Maximization algorithm — estimate_em","text":"dfm object class 'JD3_DfmModel'. Typically generated create_model() function. data mts object. standardized Boolean. Indicate whether input series already standardized . Default FALSE, meaning standardization series preliminary applied part process. input_standardization Matrix. Mean standard deviation variables consider pre-processing step standardization. Default NULL, meaning re-calculated based data. Typically, can filled output function `get_results()$preprocessing$sample_mean_stdev` applied previous estimate model. provided manually, must two columns matrix mean first column standard deviation second column. rows, order variables also respected (similar data). Note argument must filled re_estimate argument set FALSE. hand, ignored standardized argument set TRUE. pca_init Boolean. Indicate whether principal components analysis performed beforehand used initial condition EM algorithm. max_iter Integer. Maximum number iterations. eps Numeric. EM algorithm run percentage likelihood increase eps value (1e-9 default) maximum number iterations hit. re_estimate Boolean. Indicate whether model re-estimated . Default TRUE. set FALSE , reasons production process, wanted freeze model periods time. recommended freeze model long period.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_em.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate DFM with Expectations-Maximization algorithm — estimate_em","text":"object class 'JD3_DfmEstimates'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_em.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate DFM with Expectations-Maximization algorithm — estimate_em","text":"","code":"set.seed(100) data<-ts(matrix(rnorm(500), 100, 5), frequency = 12, start = c(2010,1)) data[100,1]<-data[99:100,2]<-data[(1:100)[-seq(3,100,3)],5]<-NA dfm <- create_model(nfactors=2,                     nlags=2,                     factors_type = c(\"M\", \"M\", \"YoY\", \"M\", \"Q\"),                     factors_loading = matrix(data=TRUE, 5, 2),                     var_init = \"Unconditional\") est_em<-estimate_em(dfm, data)  #est_em<-estimate_em(dfm, data, re_estimate=FALSE) # model not re-estimated"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_ml.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate DFM with Maximum Likelihood — estimate_ml","title":"Estimate DFM with Maximum Likelihood — estimate_ml","text":"Estimate DFM Maximum Likelihood","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_ml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate DFM with Maximum Likelihood — estimate_ml","text":"","code":"estimate_ml(   dfm,   data,   standardized = FALSE,   input_standardization = NULL,   pca_init = TRUE,   em_init = TRUE,   em_max_iter = 100,   em_eps = 1e-09,   max_iter = 1000,   max_block_iter = 5,   simpl_model_iter = 15,   independent_var_shocks = FALSE,   mixedEstimation = TRUE,   eps = 1e-09,   re_estimate = TRUE )"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_ml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate DFM with Maximum Likelihood — estimate_ml","text":"dfm object class 'JD3_DfmModel'. Typically generated create_model() function. data mts object. standardized Boolean. Indicate whether input series already standardized . Default FALSE, meaning standardization series preliminary applied part process. input_standardization Matrix. Mean standard deviation variables consider pre-processing step standardization. Default NULL, meaning re-calculated based data. Typically, can filled output function `get_results()$preprocessing$sample_mean_stdev` applied previous estimate model. provided manually, must two columns matrix mean first column standard deviation second column. rows, order variables also respected (similar data). Note argument must filled re_estimate argument set FALSE. hand, ignored standardized argument set TRUE. pca_init Boolean. Indicate whether principal components analysis performed beforehand used initial condition either EM algorithm (em_init=TRUE) directly ML estimation. em_init Boolean. Indicate whether EM algorithm performed beforehand used initial condition ML estimation. em_max_iter Integer. Maximum number iterations EM algorithm. Ignored em_init = FALSE. em_eps Numeric. EM algorithm run percentage likelihood increase eps value (1e-9 default) maximum number iterations hit. Ignored em_init = FALSE. max_iter Integer. Maximum number iterations ML estimation. max_block_iter Integer. Maximum number iterations optimization block. model parameters divided two blocks: one related measurement equations one VAR equations. EM algorithm requires one iteration per block, numerical optimization allows us set number iterations desired per block. simpl_model_iter Integer. Number simplified model iterations allowed. independent_var_shocks Boolean. Whether assume shocks VAR block independent. mixedEstimation Boolean. mixed estimation option alternates iterations VAR block alone simultaneous iterations two blocks. eps Numeric. ML estimation run percentage likelihood increase eps value (1e-9 default) maximum number iterations hit. re_estimate Boolean. Indicate whether model re-estimated . Default TRUE. set FALSE , reasons production process, wanted freeze model periods time. recommended freeze model long period.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_ml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate DFM with Maximum Likelihood — estimate_ml","text":"object class 'JD3_DfmEstimates'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_ml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate DFM with Maximum Likelihood — estimate_ml","text":"","code":"set.seed(100) data<-ts(matrix(rnorm(500), 100, 5), frequency = 12, start = c(2010,1)) data[100,1]<-data[99:100,2]<-data[(1:100)[-seq(3,100,3)],5]<-NA dfm <- create_model(nfactors=2,                     nlags=2,                     factors_type = c(\"M\", \"M\", \"YoY\", \"M\", \"Q\"),                     factors_loading = matrix(data=TRUE, 5, 2),                     var_init = \"Unconditional\") est_ml<-estimate_ml(dfm, data)  #est_ml<-estimate_ml(dfm, data, re_estimate=FALSE) # model not re-estimated"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate DFM with Principal components Analysis — estimate_pca","title":"Estimate DFM with Principal components Analysis — estimate_pca","text":"Estimate DFM Principal components Analysis","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate DFM with Principal components Analysis — estimate_pca","text":"","code":"estimate_pca(   dfm,   data,   standardized = FALSE,   input_standardization = NULL,   re_estimate = TRUE )"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate DFM with Principal components Analysis — estimate_pca","text":"dfm object class 'JD3_DfmModel'. Typically generated create_model() function. data mts object. standardized Boolean. Indicate whether input series already standardized . Default FALSE, meaning standardization series preliminary applied part process. input_standardization Matrix. Mean standard deviation variables consider pre-processing step standardization. Default NULL, meaning re-calculated based data. Typically, can filled output function `get_results()$preprocessing$sample_mean_stdev` applied previous estimate model. provided manually, must two columns matrix mean first column standard deviation second column. rows, order variables also respected (similar data). Note argument must filled re_estimate argument set FALSE. hand, ignored standardized argument set TRUE. re_estimate Boolean. Indicate whether model re-estimated . Default TRUE. set FALSE , reasons production process, wanted freeze model periods time. recommended freeze model long period.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate DFM with Principal components Analysis — estimate_pca","text":"object class 'JD3_DfmEstimates'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/estimate_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate DFM with Principal components Analysis — estimate_pca","text":"","code":"set.seed(100) data<-ts(matrix(rnorm(500), 100, 5), frequency = 12, start = c(2010,1)) data[100,1]<-data[99:100,2]<-data[(1:100)[-seq(3,100,3)],5]<-NA dfm <- create_model(nfactors=2,                     nlags=2,                     factors_type = c(\"M\", \"M\", \"YoY\", \"M\", \"Q\"),                     factors_loading = matrix(data=TRUE, 5, 2),                     var_init = \"Unconditional\") est_pca<-estimate_pca(dfm, data)  #est_pca<-estimate_pca(dfm, data, re_estimate=FALSE) # model not re-estimated"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_forecasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get DFM forecasts — get_forecasts","title":"Get DFM forecasts — get_forecasts","text":"Get DFM forecasts","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_forecasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get DFM forecasts — get_forecasts","text":"","code":"get_forecasts(dfm_estimates, n_fcst = 3)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_forecasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get DFM forecasts — get_forecasts","text":"dfm_estimates object class 'JD3_DfmEstimates' n_fcst Integer. Number forecast periods required.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_forecasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get DFM forecasts — get_forecasts","text":"object class 'JD3_DfmForecasts'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_forecasts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get DFM forecasts — get_forecasts","text":"","code":"set.seed(100) data<-ts(matrix(rnorm(500), 100, 5), frequency = 12, start = c(2010,1)) data[100,1]<-data[99:100,2]<-data[(1:100)[-seq(3,100,3)],5]<-NA dfm <- create_model(nfactors=2,                     nlags=2,                     factors_type = c(\"M\", \"M\", \"YoY\", \"M\", \"Q\"),                     factors_loading = matrix(data=TRUE, 5, 2),                     var_init = \"Unconditional\") est_em<-estimate_em(dfm, data) fcst<-get_forecasts(est_em, n_fcst = 2)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_news.html","id":null,"dir":"Reference","previous_headings":"","what":"DFM News analysis — get_news","title":"DFM News analysis — get_news","text":"DFM News analysis","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_news.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DFM News analysis — get_news","text":"","code":"get_news(dfm_estimates, new_data, target_series = NULL, n_fcst = 3)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_news.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DFM News analysis — get_news","text":"dfm_estimates object class 'JD3_DfmEstimates'. Typically generated functions estimate_pca(), estimate_em() estimate_ml(). new_data mts object containing updated dataset. target_series name series interest. default, first series considered. n_fcst number forecasting periods consider. Default 3.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_news.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DFM News analysis — get_news","text":"object class 'JD3_DfmNews'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_news.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DFM News analysis — get_news","text":"Banbura Modugno (2010) - Maximum likelihood estimation factor models data sets arbitrary pattern missing data","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_news.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DFM News analysis — get_news","text":"","code":"set.seed(100) data_t1<-ts(matrix(rnorm(500), 100, 5), frequency = 12, start = c(2010,1)) data_t1[100,1]<-data_t1[99:100,2]<-data_t1[(1:100)[-seq(3,100,3)],5]<-NA data_t2<-ts(rbind(data_t1, rep(NA,5)), frequency = 12, start = c(2010,1)) data_t2[100,1]<-data_t2[99,2]<-data_t2[101,3]<-data_t2[101,4]<-1  dfm_model <- create_model(nfactors=2,                           nlags=2,                           factors_type = c(\"M\", \"M\", \"YoY\", \"M\", \"Q\"),                           factors_loading = matrix(TRUE, 5, 2),                           var_init = \"Unconditional\")  est_em<-estimate_em(dfm_model, data_t1) # or to use any previous frozen model: # est_em_frozen<-estimate_em(dfm_model, data_t1, re_estimate = FALSE)  news<-get_news(est_em, data_t2, target_series = \"Series 2\", n_fcst = 2)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Get DFM results — get_results","title":"Get DFM results — get_results","text":"Get DFM results","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get DFM results — get_results","text":"","code":"get_results(dfm_estimates)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get DFM results — get_results","text":"dfm_estimates object class 'JD3_DfmEstimates'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get DFM results — get_results","text":"object class 'JD3_DfmResults'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/get_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get DFM results — get_results","text":"","code":"set.seed(100) data<-ts(matrix(rnorm(500), 100, 5), frequency = 12, start = c(2010,1)) data[100,1]<-data[99:100,2]<-data[(1:100)[-seq(3,100,3)],5]<-NA dfm <- create_model(nfactors=2,                     nlags=2,                     factors_type = c(\"M\", \"M\", \"YoY\", \"M\", \"Q\"),                     factors_loading = matrix(data=TRUE, 5, 2),                     var_init = \"Unconditional\") est_em<-estimate_em(dfm, data) rslt_em<-get_results(est_em)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/plot.JD3_DfmForecasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for objects of class 'JD3_DfmForecasts' — plot.JD3_DfmForecasts","title":"Plot function for objects of class 'JD3_DfmForecasts' — plot.JD3_DfmForecasts","text":"Plot function objects class 'JD3_DfmForecasts'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/plot.JD3_DfmForecasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for objects of class 'JD3_DfmForecasts' — plot.JD3_DfmForecasts","text":"","code":"# S3 method for class 'JD3_DfmForecasts' plot(x, series_name = NULL, ...)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/plot.JD3_DfmForecasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for objects of class 'JD3_DfmForecasts' — plot.JD3_DfmForecasts","text":"x object class 'JD3_DfmForecasts' series_name Character. Name series plot. default, first series plotted. ... arguments passed ts.plot().","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/plot.JD3_DfmNews.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for objects of class 'JD3_DfmNews' — plot.JD3_DfmNews","title":"Plot function for objects of class 'JD3_DfmNews' — plot.JD3_DfmNews","text":"Plot function objects class 'JD3_DfmNews'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/plot.JD3_DfmNews.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for objects of class 'JD3_DfmNews' — plot.JD3_DfmNews","text":"","code":"# S3 method for class 'JD3_DfmNews' plot(x, ...)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/plot.JD3_DfmNews.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for objects of class 'JD3_DfmNews' — plot.JD3_DfmNews","text":"x object class 'JD3_DfmNews' ... arguments passed barplot().","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/print.JD3_DfmEstimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for objects of class 'JD3_DfmEstimates' — print.JD3_DfmEstimates","title":"Print function for objects of class 'JD3_DfmEstimates' — print.JD3_DfmEstimates","text":"Print function objects class 'JD3_DfmEstimates'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/print.JD3_DfmEstimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for objects of class 'JD3_DfmEstimates' — print.JD3_DfmEstimates","text":"","code":"# S3 method for class 'JD3_DfmEstimates' print(x, ...)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/print.JD3_DfmEstimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for objects of class 'JD3_DfmEstimates' — print.JD3_DfmEstimates","text":"x object class 'JD3_DfmEstimates' ... arguments passed print() function.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/print.JD3_DfmForecasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for objects of class 'JD3_DfmForecasts' — print.JD3_DfmForecasts","title":"Print function for objects of class 'JD3_DfmForecasts' — print.JD3_DfmForecasts","text":"Print function objects class 'JD3_DfmForecasts'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/print.JD3_DfmForecasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for objects of class 'JD3_DfmForecasts' — print.JD3_DfmForecasts","text":"","code":"# S3 method for class 'JD3_DfmForecasts' print(x, ...)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/print.JD3_DfmForecasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for objects of class 'JD3_DfmForecasts' — print.JD3_DfmForecasts","text":"x object class 'JD3_DfmForecasts' ... arguments passed print() function.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/print.JD3_DfmNews.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for objects of class 'JD3_DfmNews' — print.JD3_DfmNews","title":"Print function for objects of class 'JD3_DfmNews' — print.JD3_DfmNews","text":"Print function objects class 'JD3_DfmNews'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/print.JD3_DfmNews.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for objects of class 'JD3_DfmNews' — print.JD3_DfmNews","text":"","code":"# S3 method for class 'JD3_DfmNews' print(x, ...)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/print.JD3_DfmNews.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for objects of class 'JD3_DfmNews' — print.JD3_DfmNews","text":"x object class 'JD3_DfmNews' ... arguments passed print() function.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/print.JD3_DfmResults.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for objects of class 'JD3_DfmResults' — print.JD3_DfmResults","title":"Print function for objects of class 'JD3_DfmResults' — print.JD3_DfmResults","text":"Print function objects class 'JD3_DfmResults'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/print.JD3_DfmResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for objects of class 'JD3_DfmResults' — print.JD3_DfmResults","text":"","code":"# S3 method for class 'JD3_DfmResults' print(x, ...)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/print.JD3_DfmResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for objects of class 'JD3_DfmResults' — print.JD3_DfmResults","text":"x object class 'JD3_DfmResults' ... arguments passed print() function.","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/summary.JD3_DfmNews.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for objects of class 'JD3_DfmNews' — summary.JD3_DfmNews","title":"Summary function for objects of class 'JD3_DfmNews' — summary.JD3_DfmNews","text":"Summary function objects class 'JD3_DfmNews'","code":""},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/summary.JD3_DfmNews.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for objects of class 'JD3_DfmNews' — summary.JD3_DfmNews","text":"","code":"# S3 method for class 'JD3_DfmNews' summary(object, ...)"},{"path":"https://rjdverse.github.io/rjd3nowcasting/reference/summary.JD3_DfmNews.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for objects of class 'JD3_DfmNews' — summary.JD3_DfmNews","text":"object object class 'JD3_DfmNews' ... arguments passed print() function.","code":""}]
